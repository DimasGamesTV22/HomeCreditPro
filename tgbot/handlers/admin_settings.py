# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import CantParseEntities

from tgbot.keyboards.inline_admin import turn_open_finl, settings_open_finl
from tgbot.loader import dp
from tgbot.services.api_sqlite import *
from tgbot.utils.misc.bot_filters import IsAdmin
from tgbot.utils.misc_functions import send_admins, get_faq


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(IsAdmin(), text="üñç –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", state="*")
async def settings_data_edit(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>üñç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞.</b>", reply_markup=settings_open_finl())


# –í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏ –±–æ—Ç–∞
@dp.message_handler(IsAdmin(), text="üïπ –í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏", state="*")
async def settings_turn_edit(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>üïπ –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</b>", reply_markup=turn_open_finl())


######################################## –í–´–ö–õ–Æ–ß–ê–¢–ï–õ–ò ########################################
# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö —Ä–∞–±–æ—Ç
@dp.callback_query_handler(IsAdmin(), text_startswith="turn_twork", state="*")
async def settings_turn_twork(call: CallbackQuery, state: FSMContext):
    get_status = call.data.split(":")[1]

    get_user = get_userx(user_id=call.from_user.id)
    update_settingsx(status_work=get_status)

    if get_status == "True":
        send_text = "üî¥ –û—Ç–ø—Ä–∞–≤–∏–ª –±–æ—Ç–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã."
    else:
        send_text = "üü¢ –í—ã–≤–µ–ª –±–æ—Ç–∞ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç."

    await send_admins(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a>\n"
        f"{send_text}", not_me=get_user['user_id'])

    await call.message.edit_reply_markup(reply_markup=turn_open_finl())


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
@dp.callback_query_handler(IsAdmin(), text_startswith="turn_buy", state="*")
async def settings_turn_buy(call: CallbackQuery, state: FSMContext):
    get_status = call.data.split(":")[1]

    get_user = get_userx(user_id=call.from_user.id)
    update_settingsx(status_buy=get_status)

    if get_status == "True":
        send_text = "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–∫—É–ø–∫–∏ –≤ –±–æ—Ç–µ."
    else:
        send_text = "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–∫—É–ø–∫–∏ –≤ –±–æ—Ç–µ."

    await send_admins(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a>\n"
        f"{send_text}", not_me=get_user['user_id'])

    await call.message.edit_reply_markup(reply_markup=turn_open_finl())


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
@dp.callback_query_handler(IsAdmin(), text_startswith="turn_pay", state="*")
async def settings_turn_pay(call: CallbackQuery, state: FSMContext):
    get_status = call.data.split(":")[1]

    get_user = get_userx(user_id=call.from_user.id)
    update_settingsx(status_refill=get_status)

    if get_status == "True":
        send_text = "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ."
    else:
        send_text = "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ."

    await send_admins(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a>\n"
        f"{send_text}", not_me=get_user['user_id'])

    await call.message.edit_reply_markup(reply_markup=turn_open_finl())


######################################## –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="settings_edit_support", state="*")
async def settings_support_edit(call: CallbackQuery, state: FSMContext):
    await state.set_state("here_settings_support")
    await call.message.edit_text("<b>‚òé –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>\n"
                                 "‚ùï –í–≤–æ–¥–∏–º—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞.")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ FAQ
@dp.callback_query_handler(IsAdmin(), text_startswith="settings_edit_faq", state="*")
async def settings_faq_edit(call: CallbackQuery, state: FSMContext):
    await state.set_state("here_settings_faq")
    await call.message.edit_text("<b>‚Ñπ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è FAQ</b>\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ HTML —Ä–∞–∑–º–µ—Ç–∫—É:\n"
                                 "<code>‚ñ∂ {username}</code>  - –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞–ª—è\n"
                                 "<code>‚ñ∂ {user_id}</code>   - –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                                 "<code>‚ñ∂ {firstname}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è FAQ
@dp.message_handler(IsAdmin(), state="here_settings_faq")
async def settings_faq_get(message: Message, state: FSMContext):
    get_message = get_faq(message.from_user.id, message.text)

    try:
        cache_msg = await message.answer(get_message)
        await state.finish()
        update_settingsx(misc_faq=message.text)

        await cache_msg.edit_text("<b>‚Ñπ FAQ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ</b>")
        await message.answer("<b>üñç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞.</b>", reply_markup=settings_open_finl())
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "‚Ñπ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è FAQ")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –∞–π–¥–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message_handler(IsAdmin(), state="here_settings_support")
async def settings_support_get(message: Message, state: FSMContext):
    if message.text.isdigit():
        get_user = get_userx(user_id=message.text)

        if get_user is not None:
            if len(get_user['user_login']) >= 1:
                await state.finish()
                update_settingsx(misc_support=get_user['user_id'])

                await message.answer("<b>‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ</b>")
                await message.answer("<b>üñç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞.</b>", reply_markup=settings_open_finl())
            else:
                await message.answer("<b>‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º.</b>\n"
                                     "‚òé –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        else:
            await message.answer("<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.</b>\n"
                                 "‚òé –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "‚òé –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
